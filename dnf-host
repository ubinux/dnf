#!/bin/bash

#DEFAULT_TARGET_ ROOTFS=""
WORKDIR=`pwd`
DEFAULT_REPO_DIR=$WORKDIR/oe_repo
HIDDEN_ROOTFS_DIR=$WORKDIR/.rootfs-${ARCH}
DEFAULT_ROOTFS_DIR=/opt/ubq/devkit/$ARCH
DEFAULT_SPDX_REPO_DIR=file://$WORKDIR/spdx_repo
DEFAULT_SPDX_DESTINATION_DIR=$WORKDIR/spdx_download
DEFAULT_SRPM_REPO_DIR=file://$WORKDIR/srpm_repo
DEFAULT_SRPM_DESTINATION_DIR=$WORKDIR/srpm_download
DEFAULT_RPM_REPO_DIR=file://$WORKDIR/oe_repo
DEFAULT_RPM_DESTINATION_DIR=$WORKDIR/rpm_download
TAR="false"

usage () {
    if [ ! -f $WORKDIR/.env-dnf ]; then
        echo "Init the environment failed, please init again"
        exit 0
    else
        source $WORKDIR/.env-dnf
        echo "dnf-host is only used on host to manage packages for target."
        echo ""
        echo "1. If you want to create a new rootfs, you must init your environment first."
        echo "   \$ dnf-host init "
        echo ""
        echo "2. If you want to manage your rootfs that has already create by dnf-host."
        echo "   \$ dnf-host [options] COMMAND "
        echo "   In this case, the usage is as same as dnf:"
        echo ""
        echo "======== Advanced OPTIONS ========"
        echo "  -Y         Automatic yes to all prompts"
        echo "  -D         use set -x to see what is going on"
        echo ""

        dnf -y -c ${HIDDEN_ROOTFS}/etc/dnf/dnf-host.conf --setopt=reposdir=${HIDDEN_ROOTFS}/etc/yum.repos.d --installroot=${HIDDEN_ROOTFS} --setopt=logdir=$WORKDIR/ help --releasever=None
    fi
    exit
}

ensure_confirm() {
   read USER_ANSWER
   if [ ! -n "$USER_ANSWER" ];then
       USER_ANSWER="Y"
   fi
   case $USER_ANSWER in
   N|n)
       ;;
   Y|y)
       return 1
       ;;
   *)
       echo "Init aborted!"
       exit 1
       ;;
   esac
}

set_dir() {
        if [ "$answer" = "Y" ]; then
            USER_DEFINE=$1
            echo "Set $2 directory to \"${USER_DEFINE#*//}\"."
        else
            echo "================================================================="
            while true; do
                read -p "Enter $2 directory (default: ${1#*//}): " USER_DEFINE
                [ "$USER_DEFINE" = "" ] && USER_DEFINE=$1
                echo "You are about to set $2 directory to \"${USER_DEFINE#*//}\". Are you sure[Y/n]?"
                ensure_confirm
                if [ $? = 1 ]; then
                    break
                fi
            done
        fi
}

dnf-init() {
    if [ -f .env-dnf ];then
        rm .env-dnf
    fi
    if [ -f .md5 ];then
        rm .md5
    fi
    if [ -d $HIDDEN_ROOTFS_DIR ];then
        echo "Deleting temp rootfs......"
        rm -rf $HIDDEN_ROOTFS_DIR
    fi
    
    #get repo directory
    set_dir $DEFAULT_REPO_DIR "repo"
    DEFINE_REPO_DIR=$USER_DEFINE
    
    #get rootfs destination directory
    set_dir $DEFAULT_ROOTFS_DIR "rootfs destination"
    DEFINE_ROOTFS_DIR=$USER_DEFINE
    
    #get SPDX repo directory
    set_dir $DEFAULT_SPDX_REPO_DIR "SPDX repo"
    DEFINE_SPDX_REPO_DIR=$USER_DEFINE

    #Add 'file://' for SPDX_REPO_DIR
    if [ ${DEFINE_SPDX_REPO_DIR:0:4} != "file" ];then
        DEFINE_SPDX_REPO_DIR=file://${DEFINE_SPDX_REPO_DIR}
    fi

    #get SPDX file destination directory
    set_dir $DEFAULT_SPDX_DESTINATION_DIR "SPDX file destination"
    DEFINE_SPDX_DESTINATION_DIR=$USER_DEFINE

    if [ ! -d $DEFINE_SPDX_DESTINATION_DIR ];then
        echo "Create the SPDX file destination directory automatically"
        mkdir -p $DEFINE_SPDX_DESTINATION_DIR
    fi
    
    #get SRPM repo directory    
    set_dir $DEFAULT_SRPM_REPO_DIR "SRPM repo"
    DEFINE_SRPM_REPO_DIR=$USER_DEFINE

    #Add 'file://' for SRPM_REPO_DIR
    if [ ${DEFINE_SRPM_REPO_DIR:0:4} != "file" ];then
        DEFINE_SRPM_REPO_DIR=file://${DEFINE_SRPM_REPO_DIR}
    fi

    #get SRPM file destination directory
    set_dir $DEFAULT_SRPM_DESTINATION_DIR "SRPM file destination"
    DEFINE_SRPM_DESTINATION_DIR=$USER_DEFINE

    if [ ! -d $DEFINE_SRPM_DESTINATION_DIR ];then
        echo "Create the SRPM file destination directory automatically"
        mkdir -p $DEFINE_SRPM_DESTINATION_DIR
    fi

    #get RPM repo directory    
    set_dir $DEFAULT_RPM_REPO_DIR "RPM repo"
    DEFINE_RPM_REPO_DIR=$USER_DEFINE

    #Add 'file://' for RPM_REPO_DIR
    if [ ${DEFINE_RPM_REPO_DIR:0:4} != "file" ];then
        DEFINE_RPM_REPO_DIR=file://${DEFINE_RPM_REPO_DIR}
    fi

    #get RPM file destination directory
    set_dir $DEFAULT_RPM_DESTINATION_DIR "RPM file destination"
    DEFINE_RPM_DESTINATION_DIR=$USER_DEFINE

    if [ ! -d $DEFINE_RPM_DESTINATION_DIR ];then
        echo "Create the RPM file destination directory automatically"
        mkdir -p $DEFINE_RPM_DESTINATION_DIR
    fi

    #Delete the prefix "file://" in REPO_DIR
    if [ ${DEFINE_REPO_DIR:0:4} = "file" ];then
        DEFINE_REPO_DIR=${DEFINE_REPO_DIR#*//}
    fi

    environment-dnf.sh $HIDDEN_ROOTFS_DIR $DEFINE_REPO_DIR $DEFINE_SPDX_REPO_DIR $DEFINE_SPDX_DESTINATION_DIR $DEFINE_SRPM_REPO_DIR $DEFINE_SRPM_DESTINATION_DIR $DEFINE_RPM_REPO_DIR $DEFINE_RPM_DESTINATION_DIR $DEFINE_ROOTFS_DIR
}

dnf-show() {
    if [ ! -f $WORKDIR/.env-dnf ]; then
        echo "Init the environment failed, please init again"
        exit 0
    else
        source $WORKDIR/.env-dnf
        echo "repo directory : ${REPO_DIR}"
        echo "rootfs destination directory : ${TARGET_ROOTFS}"
        echo "SPDX repo directory : ${SPDX_REPO_DIR}"
        echo "SPDX destination directory : ${SPDX_DESTINATION_DIR}"
        echo "SRPM repo directory : ${SRPM_REPO_DIR}"
        echo "SRPM destination directory : ${SRPM_DESTINATION_DIR}"
    fi
}

Repos-rootfs(){
    cd ${HIDDEN_ROOTFS}
    echo "Packing the tar file"
    tar -cjf ../${ROOTFS_TAR} ./*
    unset LD_PRELOAD
    sudo mkdir -p ${TARGET_ROOTFS}/rootfs-${RELEASE}-${Date}
    echo "Unpacking tar file to target dir"
    sudo tar -xjf ../${ROOTFS_TAR} -C ${TARGET_ROOTFS}/rootfs-${RELEASE}-${Date} --numeric-owner
    sudo rm ${TARGET_ROOTFS}/rootfs-${RELEASE}-${Date}/etc/dnf/dnf-host.conf
    rm -i ../${ROOTFS_TAR}
    echo "Target dir is ${TARGET_ROOTFS}/rootfs-${RELEASE}-${Date}"
}

Install_pkg_from_configfile(){
      PKG_LIST=`cat $INSTALL_LIST`
      dnf -c ${HIDDEN_ROOTFS}/etc/dnf/dnf-host.conf --setopt=reposdir=${HIDDEN_ROOTFS}/etc/yum.repos.d --repofrompath=oe-repo,${REPO_DIR} --installroot=${HIDDEN_ROOTFS} --setopt=logdir=$WORKDIR/ --nogpgcheck $* install $PKG_LIST --releasever=None
}

dnf-call() {
    if [ ! -f $WORKDIR/.env-dnf ]; then
        echo "Init the environment failed, please init again"
        exit 0
    else
        source $WORKDIR/.env-dnf
        if [ -f ${HIDDEN_ROOTFS}/var/lib/rpm/Packages -a "$1"x = "tui"x ];then
            md5sum -b ${HIDDEN_ROOTFS}/var/lib/rpm/Packages > .md5
        fi


        #Clean metadata for upgrade
        if [ "$1"x = "tui"x ]; then
            dnf -c ${HIDDEN_ROOTFS}/etc/dnf/dnf-host.conf --setopt=reposdir=${HIDDEN_ROOTFS}/etc/yum.repos.d --repofrompath=oe-repo,${REPO_DIR} --installroot=${HIDDEN_ROOTFS} --setopt=logdir=$WORKDIR/ --nogpgcheck clean metadata -q --releasever=None
        fi

        #install from config file
        if [ -n "$INSTALL_LIST" ]; then
            Install_pkg_from_configfile
        else
            dnf -c ${HIDDEN_ROOTFS}/etc/dnf/dnf-host.conf --setopt=reposdir=${HIDDEN_ROOTFS}/etc/yum.repos.d --repofrompath=oe-repo,${REPO_DIR} --installroot=${HIDDEN_ROOTFS} --setopt=logdir=$WORKDIR/ --nogpgcheck $* --releasever=None
        fi

        Date=`date +%Y%m%d%H%M`
        RELEASE=`echo $STRIP |awk -F '-' '{print $2}'`
        ROOTFS_TAR=rootfs-${RELEASE}-${Date}.tar.bz2

        if [ $TAR = "true" ]; then
            Repos-rootfs
        fi

        #When you choose tui, the rootfs will be made only after pkg operation
        if [ -f .md5 ];then
            md5sum -c .md5 --status > /dev/null
            if [ $? = 1 -a "$1"x = "tui"x ]; then
                Repos-rootfs
            fi
        elif [ -f ${HIDDEN_ROOTFS}/var/lib/rpm/Packages -a "#$1" = "#tui" ];then
            Repos-rootfs
        fi
    fi
}

#if args is none, show usage
if [ $# -eq 0 ]; then
    usage
fi

ARGS_ORG=$*
ARGS_ORG=`echo $ARGS_ORG | sed 's/-D//' | sed 's/-Y//'| sed 's/--rootfs-tar//'| sed 's/--install_list//'`

ARGS=`getopt -q -a -o hDY -l install_list:,help,rootfs-tar -- "$@"`

eval set -- "${ARGS}"
while true
do
        case "$1" in
        -h|--help)
                usage
                shift
                ;;
        --rootfs-tar)
                TAR="true"
                shift
                ;;
        --install_list)
                INSTALL_LIST=$2
                shift 2
                ;;
        -D)
                set -x
                shift
                ;;
        -Y)
                answer="Y"
                shift
                ;;
        --)
                shift
                break
                ;;
        esac
done

#Deal residual args 
if [ "$1"x = "init"x -a $# = 1 ]; then
    dnf-init
elif [ "$1"x = "show"x ]; then
    dnf-show
else
    dnf-call $ARGS_ORG
fi
